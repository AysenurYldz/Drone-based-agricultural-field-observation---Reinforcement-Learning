# -*- coding: utf-8 -*-
"""TarimDroneSimulasyonu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v1UWkWwSxD5vR48M2bRnfMtTT6vVBJrx
"""

# -*- coding: utf-8 -*-
"""Gelişmiş Tarım Drone'u Simülasyonu"""

import os
import cv2
import random
import numpy as np
import matplotlib.pyplot as plt
import time
import pickle
import gym
from gym import spaces
from collections import deque
from google.colab import drive

# Google Drive bağlantısı
drive.mount("/content/drive")

# =====================
# SABİTLER ve AYARLAR
# =====================
GRID_SIZE = 6  # 6x6'lık tarım alanı
CELL_TYPES = {
    0: 'boş',      # Boş hücre
    1: 'sağlıklı', # Sağlıklı bitki
    2: 'hastalıklı' # Hastalıklı bitki
}

# =====================
# GÖRSELLERİN YÜKLENMESİ
# =====================
def resimleri_yukle():
    """Görsel dosyalarını yükler ve RGB formatına çevirir"""
    resim_klasoru = "/content/drive/MyDrive24435004047_derin_pekiştirmeli_öğrenme/kodlar/images"
    resimler = {
        'tarla': cv2.imread(os.path.join(resim_klasoru, "tarla.png")),
        'bos': cv2.imread(os.path.join(resim_klasoru, "bos.png")),
        'hastalikli': cv2.imread(os.path.join(resim_klasoru, "kirmizi.png")),
        'drone': cv2.imread(os.path.join(resim_klasoru, "drone.png")),
        'sarj': cv2.imread(os.path.join(resim_klasoru, "sarj.png"))
    }

    # Görselleri RGB formatına çevir
    for key in resimler:
        if resimler[key] is not None:
            resimler[key] = cv2.cvtColor(resimler[key], cv2.COLOR_BGR2RGB)
        else:
            raise FileNotFoundError(f"{key} görseli bulunamadı: {os.path.join(resim_klasoru, key)}.png")

    return resimler

# Görselleri yükle
try:
    resimler = resimleri_yukle()
    HUCRE_Y, HUCRE_X = resimler['tarla'].shape[0]//GRID_SIZE, resimler['tarla'].shape[1]//GRID_SIZE
except Exception as hata:
    print(f"Görsel yükleme hatası: {str(hata)}")
    exit()

# =====================
# TARIM ALANI OLUŞTURMA
# =====================
def bitki_haritasi_olustur():
    """Rastgele bitki dağılımı oluşturur"""
    bitki_haritasi = np.ones((GRID_SIZE, GRID_SIZE), dtype=np.uint8)

    # 5 boş hücre
    bos_sayisi = 0
    while bos_sayisi < 5:
        i, j = random.randint(0, GRID_SIZE-1), random.randint(0, GRID_SIZE-1)
        if bitki_haritasi[i, j] == 1 and (i, j) != (0, 0):  # Şarj istasyonunu (0,0) boş bırak
            bitki_haritasi[i, j] = 0
            bos_sayisi += 1

    # 5 hastalıklı bitki
    hastalikli_sayisi = 0
    while hastalikli_sayisi < 5:
        i, j = random.randint(0, GRID_SIZE-1), random.randint(0, GRID_SIZE-1)
        if bitki_haritasi[i, j] == 1 and (i, j) != (0, 0):
            bitki_haritasi[i, j] = 2
            hastalikli_sayisi += 1

    return bitki_haritasi

# =====================
# ORTAM SINIFI
# =====================
class TarimOrtami(gym.Env):
    """Hastalıklı bitki tespitine odaklı tarım ortamı"""

    def __init__(self, goruntule=False):
        super(TarimOrtami, self).__init__()

        # Aksiyon uzayı: 0=yukarı, 1=aşağı, 2=sol, 3=sağ, 4=şarj
        self.action_space = spaces.Discrete(5)

        # Gözlem uzayı
        self.observation_space = spaces.Dict({
            "pozisyon": spaces.MultiDiscrete([GRID_SIZE, GRID_SIZE]),
            "ziyaret_edilen": spaces.MultiBinary([GRID_SIZE, GRID_SIZE]),
            "yerel_gorunum": spaces.Box(low=0, high=2, shape=(3,3), dtype=np.uint8),
            "batarya": spaces.Box(low=0, high=100, shape=(1,), dtype=np.float32),
            "sarjdan_beri_adim": spaces.Discrete(100),
            "hastalikli_tespit": spaces.Box(low=0, high=1, shape=(1,), dtype=np.float32)
        })

        self.goruntule = goruntule
        self.bitki_haritasi = bitki_haritasi_olustur()
        self.toplam_hastalikli = np.sum(self.bitki_haritasi == 2)

        # Batarya ayarları
        self.batarya_tuketim = 2.5  # Hareket başına batarya tüketimi
        self.sarj_hizi = 8.0         # Şarj hızı
        self.maks_adim = 200         # Maksimum adım sayısı

        # Ödül parametreleri
        self.hastalikli_bulma_odulu = 300.0
        self.eve_donus_odulu = 200.0
        self.batarya_cezasi = -150.0
        self.sarij_odulu = 10.0
        self.bos_hucre_odulu = 20.0
        self.saglikli_odulu = 10.0

        self.reset()

    def reset(self):
        """Ortamı sıfırla ve yeni harita oluştur"""
        self.bitki_haritasi = bitki_haritasi_olustur()
        self.toplam_hastalikli = np.sum(self.bitki_haritasi == 2)

        self.drone_pozisyonu = [0, 0]  # Başlangıç pozisyonu (şarj istasyonu)
        self.ziyaret_edilen = set()
        self.ziyaret_sayilari = np.zeros((GRID_SIZE, GRID_SIZE), dtype=np.int8)
        self.bulunan_hastalikli = 0
        self.batarya = 100.0
        self.adim_sayaci = 0
        self.sarjdan_beri_adim = 0
        self.gorev_tamamlandi = False

        return self._get_obs()

    def step(self, action):
        """Bir adım gerçekleştir"""
        self.adim_sayaci += 1
        y, x = self.drone_pozisyonu
        done = False
        reward = 0.0
        info = {'action': 'move', 'reason': None, 'mission_complete': False}

        # Batarya tüketimi
        if action != 4:
            self.batarya = max(0.0, self.batarya - self.batarya_tuketim)
            self.sarjdan_beri_adim += 1

        # Batarya kontrolü
        if self.batarya <= 0:
            reward = self.batarya_cezasi
            done = True
            info['reason'] = 'battery_depleted'
            return self._get_obs(), reward, done, info

        # Aksiyonları işle
        if action == 4:  # Şarj
            if (y, x) == (0, 0):
                charge_amount = min(self.sarj_hizi, 100 - self.batarya)
                self.batarya += charge_amount
                reward = max(self.sarij_odulu, charge_amount * 1.5)
                info['action'] = 'charge'
                self.sarjdan_beri_adim = 0
            else:
                reward = -30.0
                info['action'] = 'failed_charge'
        else:  # Hareket
            new_y, new_x = y, x
            if action == 0 and y > 0: new_y -= 1
            elif action == 1 and y < GRID_SIZE - 1: new_y += 1
            elif action == 2 and x > 0: new_x -= 1
            elif action == 3 and x < GRID_SIZE - 1: new_x += 1

            self.drone_pozisyonu = [new_y, new_x]
            self.ziyaret_sayilari[new_y, new_x] += 1

            # Ödüllendirme (Hastalıklı bulma öncelikli)
            if (new_y, new_x) not in self.ziyaret_edilen:
                cell_type = self.bitki_haritasi[new_y, new_x]
                if cell_type == 2:  # Hastalıklı
                    reward = self.hastalikli_bulma_odulu
                    self.bulunan_hastalikli += 1
                elif cell_type == 0:  # Boş
                    reward = self.bos_hucre_odulu
                else:  # Sağlıklı
                    reward = self.saglikli_odulu
                self.ziyaret_edilen.add((new_y, new_x))
            else:
                reward = -15.0 * self.ziyaret_sayilari[new_y, new_x]

        # Görev tamamlama kontrolü
        if not self.gorev_tamamlandi and self.bulunan_hastalikli >= self.toplam_hastalikli:
            self.gorev_tamamlandi = True
            info['mission_complete'] = True
            reward += 100.0  # Tamamlama bonusu

        # Eve dönüş teşviki
        if self.gorev_tamamlandi:
            if (y, x) == (0, 0):
                reward += self.eve_donus_odulu
                done = True
                info['reason'] = 'mission_complete'
            else:
                reward += max(5.0, 15.0 / (y + x + 1))

        # Maksimum adım kontrolü
        if self.adim_sayaci >= self.maks_adim:
            done = True
            info['reason'] = 'max_steps'

        return self._get_obs(), float(reward), done, info

    def _get_obs(self):
        """Gözlemleri hazırla"""
        y, x = self.drone_pozisyonu
        local_view = np.zeros((3,3), dtype=np.uint8)

        for i in [-1, 0, 1]:
            for j in [-1, 0, 1]:
                ny, nx = y+i, x+j
                if 0 <= ny < GRID_SIZE and 0 <= nx < GRID_SIZE:
                    local_view[i+1, j+1] = self.bitki_haritasi[ny, nx]

        visited_matrix = np.zeros((GRID_SIZE, GRID_SIZE), dtype=np.uint8)
        for zy, zx in self.ziyaret_edilen:
            visited_matrix[zy, zx] = 1

        tespit_orani = self.bulunan_hastalikli / max(1, self.toplam_hastalikli)

        return {
            "pozisyon": np.array([y, x]),
            "ziyaret_edilen": visited_matrix,
            "yerel_gorunum": local_view,
            "batarya": np.array([self.batarya]),
            "sarjdan_beri_adim": np.array([self.sarjdan_beri_adim]),
            "hastalikli_tespit": np.array([tespit_orani])
        }

    def render(self, mode='human'):
        """Ortamı görselleştir"""
        canvas = resimler['tarla'].copy()

        # Şarj istasyonu
        y1, y2 = 0, HUCRE_Y
        x1, x2 = 0, HUCRE_X
        canvas[y1:y2, x1:x2] = cv2.resize(resimler['sarj'], (HUCRE_X, HUCRE_Y))

        # Hücreleri çiz
        for i in range(GRID_SIZE):
            for j in range(GRID_SIZE):
                if (i, j) == (0, 0): continue

                y1, y2 = i*HUCRE_Y, (i+1)*HUCRE_Y
                x1, x2 = j*HUCRE_X, (j+1)*HUCRE_X

                cell_type = self.bitki_haritasi[i, j]
                if cell_type == 0:
                    canvas[y1:y2, x1:x2] = cv2.resize(resimler['bos'], (HUCRE_X, HUCRE_Y))
                elif cell_type == 2:
                    canvas[y1:y2, x1:x2] = cv2.resize(resimler['hastalikli'], (HUCRE_X, HUCRE_Y))

        # Drone'u çiz
        dy, dx = self.drone_pozisyonu
        y1, y2 = dy*HUCRE_Y, (dy+1)*HUCRE_Y
        x1, x2 = dx*HUCRE_X, (dx+1)*HUCRE_X
        canvas[y1:y2, x1:x2] = cv2.resize(resimler['drone'], (HUCRE_X, HUCRE_Y))

        plt.figure(figsize=(10, 10))
        plt.imshow(canvas)
        plt.axis('off')
        title = f"Adım: {self.adim_sayaci} | Batarya: {self.batarya:.1f}%\n"
        title += f"Hastalıklı: {self.bulunan_hastalikli}/{self.toplam_hastalikli} | "
        title += f"Son Şarj: {self.sarjdan_beri_adim} adım önce"
        plt.title(title)
        plt.show()

# =====================
# AKILLI DRONE SINIFI
# =====================
class AkilliDrone:
    """Hastalıklı bitki tespitine odaklı drone ajanı"""

    def __init__(self, ortam):
        self.ortam = ortam
        self.q_tablosu = np.zeros((GRID_SIZE, GRID_SIZE, 21, 5, 5, 5))

        # Hiperparametreler
        self.ogrenme_orani = 0.15
        self.indirim_faktoru = 0.92
        self.kesif_orani = 1.0
        self.kesif_azalma = 0.999995
        self.min_kesif = 0.01
        self.hastalikli_odul_agirligi = 2.0

        # İstatistikler
        self.bolum_odulleri = []
        self.tespit_oranlari = []
        self.eve_donus_oranlari = []
        self.basari_puanlari = []

    def durum_ayristir(self, durum):
        """Durumu ayrıklaştır"""
        y, x = durum['pozisyon']
        batarya = min(20, int(durum['batarya'][0] // 5))
        sarj_adim = min(4, durum['sarjdan_beri_adim'][0] // 5)
        tespit_orani = min(4, int(durum['hastalikli_tespit'][0] * 4))

        return (y, x, batarya, sarj_adim, tespit_orani)

    def aksiyon_sec(self, durum):
        """Aksiyon seç"""
        ayrik_durum = self.durum_ayristir(durum)
        y, x = durum['pozisyon']
        batarya = durum['batarya'][0]
        tespit_orani = durum['hastalikli_tespit'][0]

        # Kritik durumlar
        if batarya < 20 and (y, x) != (0, 0):
            if y > 0: return 0
            if x > 0: return 2
            return random.choice([0, 2])

        if tespit_orani >= 1.0 and (y, x) != (0, 0):
            if y > 0: return 0
            if x > 0: return 2
            return random.choice([0, 2])

        if (y, x) == (0, 0) and batarya > 90 and durum['sarjdan_beri_adim'][0] < 3:
            return random.choice([1, 3])

        # Epsilon-greedy
        if random.random() < self.kesif_orani:
            return self.ortam.action_space.sample()

        return np.argmax(self.q_tablosu[ayrik_durum])

    def q_tablosu_guncelle(self, durum, aksiyon, odul, sonraki_durum):
        """Q-tablosunu güncelle"""
        mevcut_durum = self.durum_ayristir(durum)
        sonraki_durum_ayrik = self.durum_ayristir(sonraki_durum)

        # Hastalıklı bulma ödüllerini ağırlıklandır
        if odul >= self.ortam.hastalikli_bulma_odulu:
            odul *= self.hastalikli_odul_agirligi

        mevcut_q = self.q_tablosu[mevcut_durum + (aksiyon,)]
        maks_sonraki_q = np.max(self.q_tablosu[sonraki_durum_ayrik])

        alpha = self.ogrenme_orani * (0.2 + 0.8 * (1 - durum['hastalikli_tespit'][0]))
        yeni_q = mevcut_q + alpha * (odul + self.indirim_faktoru * maks_sonraki_q - mevcut_q)
        self.q_tablosu[mevcut_durum + (aksiyon,)] = yeni_q

    def egit(self, bolum_sayisi=1000000, maks_adim=200):
        """Ajanı eğit"""
        self.ortam.maks_adim = maks_adim
        baslangic_zamani = time.time()
        en_iyi_basari = 0

        for bolum in range(1, bolum_sayisi + 1):
            durum = self.ortam.reset()
            toplam_odul = 0.0
            done = False
            mission_complete = False

            while not done:
                aksiyon = self.aksiyon_sec(durum)
                sonraki_durum, odul, done, bilgi = self.ortam.step(aksiyon)

                if bilgi.get('mission_complete', False) and self.ortam.drone_pozisyonu == [0, 0]:
                    mission_complete = True
                    done = True

                self.q_tablosu_guncelle(durum, aksiyon, odul, sonraki_durum)
                toplam_odul += odul
                durum = sonraki_durum

            # İstatistikleri güncelle
            self.kesif_orani = max(self.min_kesif, self.kesif_orani * self.kesif_azalma)
            tespit_orani = self.ortam.bulunan_hastalikli / self.ortam.toplam_hastalikli
            eve_donus = 1 if mission_complete else 0
            basari_puani = 0.7 * tespit_orani + 0.3 * eve_donus

            self.bolum_odulleri.append(toplam_odul)
            self.tespit_oranlari.append(tespit_orani)
            self.eve_donus_oranlari.append(eve_donus)
            self.basari_puanlari.append(basari_puani)

            # İlerleme raporu
            if bolum % 1000 == 0:
                ortalama_odul = np.mean(self.bolum_odulleri[-1000:])
                ortalama_tespit = np.mean(self.tespit_oranlari[-1000:]) * 100
                ortalama_eve_donus = np.mean(self.eve_donus_oranlari[-1000:]) * 100
                ortalama_basari = np.mean(self.basari_puanlari[-1000:]) * 100
                gecen_zaman = (time.time() - baslangic_zamani) / 60

                # En iyi modeli kaydet
                if ortalama_basari > en_iyi_basari:
                    en_iyi_basari = ortalama_basari
                    self.model_kaydet(f"/content/drive/MyDrive/24435004047_derin_pekiştirmeli_öğrenme/kodlar/models/en_iyi_drone_q_tablosu.pkl")

                print(f"Bölüm {bolum} | Ort. Ödül: {ortalama_odul:.1f}")
                print(f"Tespit: {ortalama_tespit:.1f}% | Eve Dönüş: {ortalama_eve_donus:.1f}%")
                print(f"Başarı: {ortalama_basari:.1f}% | Keşif: {self.kesif_orani:.4f}")
                print(f"Süre: {gecen_zaman:.1f} dakika")
                print("----------------------------------")

            # Ara model kaydet
            if bolum % 100000 == 0:
                self.model_kaydet(f"/content/drive/MyDrive/24435004047_derin_pekiştirmeli_öğrenme//kodlar/models/drone_q_tablosu_{bolum}.pkl")

        self.model_kaydet()
        self.egitim_grafikleri()
        return self.q_tablosu

    def egitim_grafikleri(self):
        """Eğitim istatistiklerini görselleştir"""
        plt.figure(figsize=(18, 6))

        # Başarı puanı
        plt.subplot(1, 3, 1)
        basari_düz = np.convolve(self.basari_puanlari, np.ones(5000)/5000, mode='valid')
        plt.plot(basari_düz * 100)
        plt.title('Başarı Puanı (5000 bölüm ort.)')
        plt.xlabel('Bölüm')
        plt.ylabel('Başarı %')
        plt.ylim(0, 100)

        # Tespit ve eve dönüş oranları
        plt.subplot(1, 3, 2)
        tespit_düz = np.convolve(self.tespit_oranlari, np.ones(5000)/5000, mode='valid')
        eve_donus_düz = np.convolve(self.eve_donus_oranlari, np.ones(5000)/5000, mode='valid')
        plt.plot(tespit_düz * 100, label='Tespit Oranı')
        plt.plot(eve_donus_düz * 100, label='Eve Dönüş Oranı')
        plt.title('Performans Metrikleri')
        plt.xlabel('Bölüm')
        plt.ylabel('Oran %')
        plt.legend()

        # Ödüller ve keşif
        plt.subplot(1, 3, 3)
        plt.plot(np.convolve(self.bolum_odulleri, np.ones(1000)/1000, mode='valid'), 'r', label='Ort. Ödül')
        plt.plot(self.kesif_gecmisi, 'g', label='Keşif Oranı')
        plt.title('Ödüller ve Keşif')
        plt.xlabel('Bölüm')
        plt.legend()

        plt.tight_layout()
        plt.show()

    def model_kaydet(self, dosya_adi="/content/drive/MyDrive/24435004047_derin_pekiştirmeli_öğrenme/kodlar/models/drone_q_tablosu.pkl"):
        """Modeli kaydet"""
        with open(dosya_adi, "wb") as f:
            pickle.dump({
                'q_tablosu': self.q_tablosu,
                'kesif_orani': self.kesif_orani,
                'istatistikler': {
                    'oduller': self.bolum_odulleri,
                    'tespit_oranlari': self.tespit_oranlari,
                    'eve_donus_oranlari': self.eve_donus_oranlari,
                    'basari_puanlari': self.basari_puanlari
                }
            }, f)
        print(f"Model '{dosya_adi}' olarak kaydedildi.")

# =====================
# TEST FONKSİYONU
# =====================
def drone_testi(q_tablosu=None, test_sayisi=5, bekleme_suresi=0.3):
    """Eğitilmiş ajanı test et"""
    test_ortami = TarimOrtami(goruntule=True)
    ajan = AkilliDrone(test_ortami)

    if q_tablosu is not None:
        ajan.q_tablosu = q_tablosu
    ajan.kesif_orani = 0

    basari_puanlari = []
    tespit_oranlari = []
    eve_donus_oranlari = []
    toplam_oduller = []

    for test in range(1, test_sayisi+1):
        durum = test_ortami.reset()
        done = False
        toplam_odul = 0.0
        mission_complete = False

        print(f"\n=== TEST {test} ===")
        test_ortami.render()

        while not done:
            aksiyon = ajan.aksiyon_sec(durum)
            durum, odul, done, bilgi = test_ortami.step(aksiyon)
            toplam_odul += odul

            if test_ortami.goruntule:
                test_ortami.render()
                time.sleep(bekleme_suresi)

            print(f"Adım {test_ortami.adim_sayaci}: {bilgi['action']}, Ödül: {odul:.1f}, Batarya: {durum['batarya'][0]:.1f}%")

            if bilgi.get('mission_complete', False) and test_ortami.drone_pozisyonu == [0, 0]:
                mission_complete = True
                done = True

        # İstatistikleri kaydet
        tespit_orani = test_ortami.bulunan_hastalikli / test_ortami.toplam_hastalikli
        eve_donus = 1 if mission_complete else 0
        basari_puani = 0.7 * tespit_orani + 0.3 * eve_donus

        tespit_oranlari.append(tespit_orani)
        eve_donus_oranlari.append(eve_donus)
        basari_puanlari.append(basari_puani)
        toplam_oduller.append(toplam_odul)

        print(f"\nTEST SONUCU | Toplam Ödül: {toplam_odul:.1f}")
        print(f"Hastalıklı Tespit: {test_ortami.bulunan_hastalikli}/{test_ortami.toplam_hastalikli}")
        print(f"Eve Dönüş: {'Evet' if eve_donus else 'Hayır'}")
        print(f"Başarı Puanı: {basari_puani:.2f}")
        print("="*50)

    # Genel sonuçlar
    print("\n=== GENEL TEST SONUÇLARI ===")
    print(f"Ortalama Tespit Oranı: {np.mean(tespit_oranlari)*100:.1f}%")
    print(f"Ortalama Eve Dönüş Oranı: {np.mean(eve_donus_oranlari)*100:.1f}%")
    print(f"Ortalama Başarı Puanı: {np.mean(basari_puanlari)*100:.1f}%")
    print(f"Ortalama Toplam Ödül: {np.mean(toplam_oduller):.1f}")

# =====================
# ANA PROGRAM
# =====================
if __name__ == "__main__":
    # Ortamı oluştur
    ortam = TarimOrtami(goruntule=False)

    try:
        # Önce eğitilmiş modeli yükle
        model_dosyasi = "/content/drive/MyDrive/24435004047_derin_pekiştirmeli_öğrenme/kodlar/models/drone_q_tablosu.pkl"
        with open(model_dosyasi, "rb") as f:
            model_verisi = pickle.load(f)
            q_tablosu = model_verisi['q_tablosu']
        print("Eğitim verisi yüklendi. Test başlatılıyor...")
        drone_testi(q_tablosu, test_sayisi=5)
    except Exception as e:
        print(f"Model yüklenirken hata: {str(e)}\nYeni eğitim başlatılıyor...")

        # Eğitim parametrelerini ayarla
        ajan = AkilliDrone(ortam)
        ajan.ogrenme_orani = 0.15
        ajan.indirim_faktoru = 0.92
        ajan.kesif_orani = 0.3
        ajan.min_kesif = 0.01

        try:
            q_tablosu = ajan.egit(bolum_sayisi=1800000)
            drone_testi(q_tablosu, test_sayisi=5)
        except Exception as training_error:
            print(f"Eğitim sırasında hata: {str(training_error)}")
            print("Lütfen hiperparametreleri ayarlayıp tekrar deneyin.")
